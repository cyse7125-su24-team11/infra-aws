module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "~> 20.0"

  cluster_name    = "module_eks"
  cluster_version = "1.29"
  #   role_arn = var.eks_cluster_role
  authentication_mode                      = var.eks_authentication_mode
  enable_cluster_creator_admin_permissions = true

  vpc_id = var.eks_vpc.id
  subnet_ids = [
    var.private_subnets[0].id,
    var.private_subnets[1].id,
    var.private_subnets[2].id
  ]
  control_plane_subnet_ids = [
    var.public_subnets[0].id,
    var.public_subnets[1].id,
    var.public_subnets[2].id,
  ]
  #     security_group_ids = [var.eks_sg.id]
  cluster_encryption_config = {
    "resources" : [
      "secrets"
    ],
    "provider" : {
      "key_arn" = "${var.eks_secrets_arn}"
    }
  }
  cluster_endpoint_public_access  = true
  cluster_endpoint_private_access = true
  create_cloudwatch_log_group     = true
  cluster_enabled_log_types       = var.enabled_cluster_log_types

  cluster_addons = {
    coredns = {
      most_recent = true
    }
    kube-proxy = {
      most_recent = true
    }
    vpc-cni = {
      most_recent = true
    }
    eks-pod-identity-agent = {
      most_recent = true
    }
    aws-ebs-csi-driver = {
      most_recent = true
      # addon_version = "v1.31.0-eksbuild.1"
    }
  }
  cluster_ip_family = var.kubernetes_network_config

  # EKS Managed Node Group(s)
  eks_managed_node_group_defaults = {
    instance_types = ["t2.medium"]
  }

  eks_managed_node_groups = {
    node_groups = {
      min_size     = 2
      max_size     = 2
      desired_size = 2

      instance_types = ["t2.medium"]
    }
  }

  access_entries = {
    # One access entry with a policy associated
    example = {
      kubernetes_groups = []
      principal_arn     = "${var.eks_cluster_role}"

      policy_associations = {
        example = {
          policy_arn = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSViewPolicy"
          access_scope = {
            namespaces = ["default"]
            type       = "namespace"
          }
        }
      }
    }
  }

  tags = {
    Environment = "dev"
    Terraform   = "true"
  }
}